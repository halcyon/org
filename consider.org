* The Extensible, Customizable Display Editor - or should I invest time in Emacs?

** Why bother?
   - "speed dating is useless
      3 minutes isnâ€™t enough to properly explain the benefits of the unix philosophy" --I Am Devloper
   - "Give me six hours to chop down a tree and I will spend the first four sharpening the axe." --Abraham Lincoln
   - Sharp tools combined with skill and expertise -> Great Results
     - Can you imagine if your surgeon decided to use a low quality
       tool because they didn't want to invest their time in
       developing their skills? I don't want that person cutting on
       me!

** Why not use an IDE?
   - Proficiency
     - Serious time investment
   - Cross Platform
     - Key bindings
   - Programmable

** Vim strengths
   - Composable command language
   - Speed
   - posix standard (vi)
   - The tireless Tim Pope and community
   - modal editing (combined with a leader key, it's very nice to not have keybindings conflict with other apps or the OS)
   - ability to navigate with only one hand
   - stability

** Vim weaknesses
   - No async operations (Possibly resolved with neovim)
   - VimL
   - weak conventions around keybindings between plugins

** Emacs strengths
   - A Lisp environment. The Lisp runtime, low level libs, and tools
     are written in C. Much of the editor functionality itself is
     written in Emacs Lisp.
     - "Semi-phenomenal, nearly cosmic powers. Itty bitty living space."
     - Every keybinding is mapped to a lisp function
     - Emacs is the composition of lisp functions
     - The documentation for these functions can be easily inspected with "C-h f"
       - All mapped keybindings
       - Access to source
     - Functions can be defined/redefined/undefined at runtime
     - Introspection: Variable (setting) documentation and value(s) can be inspected at runtime "C-h v"
   - Huge community with many high quality packages
     - Ert-runner (A tool for running headless unit tests against emacs packages)
   - Conventions around keymappings
     - From package to package - lots of shared metaphors for basic interaction
       - SLIME, Cider, Geiser, Lisp
     - Reserved keybindings for major modes, prevent conflicts
       with minor modes.
     - Reserved keybindings for users
   - Emacs LISP
   - Killer Apps
     - Magit (modal)
       - Most git interfaces trade power for convenience. Magit is amazing becomes it adds convenience without compromising power.
     - Org mode (Markdown's big brother)
       - Spreadsheets, folding, and more!

         indent-rigidly

         |------+-------+----+------|
         | This | Thing | is | Cool |
         |------+-------+----+------|
         | q    |  2.15 |    |      |
         | a    |     2 |    |      |
         | r    |     3 |    |      |
         | f    |   2.0 |    |      |
         | f    |  1.01 |    |      |
         | z    |  3.00 |    |      |
         |------+-------+----+------|
         |      |       |    |      |
         |------+-------+----+------|
         #+TBLFM: @>$2=vsum(@II..III);%.2f
     - Projectile
       - Open projects and switch between them at the speed of thought
       - Open and find files within a project at the speed of thought
     - SLIME
     - Company
       - Uses pluggable back-ends and front-ends to retrieve and display completion candidates
     - SmartParens
       - Structural editing of anything dealing with pairs
         - Wrap, unwrap, and rewrap
         - Expand and contract
         - Navigate

** Emacs weaknesses
   - Stability
   - Speed & resource consumption
   - Requires two hands (and maybe a foot if you invest in a foot-pedal)

** From time to time reevaluate
   - Requirements and capabilities change
   - https://github.com/jwiegley/use-package
   - https://www.gnu.org/software/emacs/emacs-paper.html
