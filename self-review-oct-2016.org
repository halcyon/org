* Self Assessment
** What do you consider to be your major on-the-job accomplishments over the last 12 months? In other words, what are you most proud of?

- RentPath
  - Proficient contributor and maintainer of Listing Service project
  - Mastery of Emacs and Clojure tooling for the highest levels of productivity as both a team collaborator and individual contributor
  - Proficient contributor and maintainer of Reviews Service project
  - Proficient contributor and maintainer of Lease Pulse project

- LISP topics applicable to all LISPs including Clojure
  - Lambda Calculus
    - Implementation of Add/Subtract/Mult/Exponentiation operations
      using only the application of anonymous functions
    - Implementation of Boolean Functions using only the application
      of anonymous functions
    - Implementation of recursion using only the application anonymous
      functions
    - The Y-Combinator
  - Learned how to write functions that advise other Lisp functions

- Clojure topics
  - Mastered writing React Native code in Clojure for Mobile (iOS/Android)
  - Master Functional Reactive Programming with the [[https://github.com/Day8/re-frame][Re-frame]] framework
  - Learned the [[http://reagent-project.github.io][Reagent]] React clojurescript framework
  - Learned how to write automated unit tests for clojurescript
  - Learned the oauth2 protocol and implemented an oauth2 client in clojure
  - Writing Clojure test fixtures
  - Clojure reader conditionals
  - Clojure macros
  - Writing macros to be used in clojurescript
  - Clojure core support for regexes and groups
  - Mastered clojure reduce
  - Mastered the clojure reduce-kv function
  - Mastered writing clojure transducers from scratch
  - Mastered writing clojure transducers from reducing functions
  - Mastered building clojure transducers using "off-the-shelf" transducers such as map arity-1
  - Mastered Prismatic Schema
  - Mastered property-based/generative testing using Prismatic Schema
  - Mastered clojure.spec
  - Mastered property-based/generative testing using clojure.spec
  - Learned multimethods
  - Mastered protocols
  - Learned clojure deftype
  - Learned clojure reify
  - Mastered clojure records
  - Wrote a [[https://github.com/halcyon/hackerrank-clj][test harness in Clojure for completing HackerRank problems]] without the HackerRank environment

- Open Source Contributions
  - Refactored org2jekyll to be able to support any jekyll propery [[https://github.com/ardumont/org2jekyll/pull/41][PR-41]]
  - Setup continuous integration for org2jekyll with travis [[https://github.com/ardumont/org2jekyll/pull/31][PR-31]]
  - Implemented run test at point for running Emacs Lisp unit tests from within Emacs [[https://github.com/tonini/overseer.el/pull/8][PR-8]]
  - Fixed Java 8 documentation lookups in ensime-server - [[https://github.com/ensime/ensime-server/pull/1441][PR-1441]]
  - Updated defunkt's emacs gist documentation to use oauth tokens - [[https://github.com/defunkt/gist.el/pull/91][PR-91]]

- Technology & Languages

  - Learned how to access Google Data APIs
  - Became proficient in use of GNU Privacy Guard encryption
  - Studied Erlang
  - Studied Scala
  - Studied Haskell
  - Studied and used [[https://github.com/halcyon/fundamentals][Java 8 Lambdas and Streaming]]
  - Completed 30 Days of Code - a Java based HackerRank course


** List your strengths, and opportunities for improvement in your current position.

 - Strengths
   - Highly productive and efficient

 - Opportunities
   - Give a tech talk

** What could be changed within your work environment to increase your overall job satisfaction?
 - Less process/ceremony
   - Fewer meetings
 - Bring back 10% time

** What professional goals would you be interested in working toward during the next 12 months? Include any additional training required.
 - Give a talk
 - Self Study
   - Theoretical foundations and influences on Clojure
     - Common Lisp ([[http://www.gigamonkeys.com/book/][Practical Common Lisp - Peter Seibel]])
     - Scheme [[http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-001-structure-and-interpretation-of-computer-programs-spring-2005/index.htm][MIT Course - Structure and Interpretation of Computer Programs]]
   - Gang of Four Design Patterns and their Clojure analogues
   - A concatenative language (Factor or Forth)
   - [[http://learnyouahaskell.com/][Haskell]] (Category Theory/Pattern Matching/Purely Functional/Monads)
   - [[http://learnyousomeerlang.com/][Erlang]] (Massively paralell/Patterm Matching/Foundation for Elixir)
   - Elixir
   - Further improvements to Emacs proficiency http://emacsrocks.com/

* Strengths/Accomplishments
- Commenter: Kaushik Acharya
- Status: Public
- 9/29/2016: 6:35:15 PM
Scott is a driven employee who focuses well on his tasks. During the
course of the past year, Scott has made material contributions toward
various Clojure code bases (in chronological order):

- LeasePulse
- Reviews API (new version)
- Sitemapper
- Listing Service

  Specifically during the recent push in the development of Listing
  Service, Scott has made great strides in getting features implemented
  and delivered to QA, while maintaing reasonable code quality.

  Scott's peers have expressed pleasure in pairing with him and describe the sessions as productive and informative.

  Scott is meticulous about testing his code, which leads to added confidence in the team as far as code quality and fulfilment of business concerns are concerned.

* Opportunities for Improvement
- Commenter: Kaushik Acharya
- Status: Public
- 9/29/2016: 6:38:48 PM
  Since joining RentPath, Scott has acquired in-depth knowledge of many
  Clojure intricacies, which has helped him make good progress in his
  position as senior software engineer.

  As Scott progresses along his career, I would like to see him gain
  more proficiency, not only as a coder but also in peripheral developer
  skill sets such as assuming lead on projects and mentoring of junior
  developers (some of which he has been doing).

  Scott should work toward gaining knowledge of not only what code to
  write in a given situation, but also why. I feel that exposure to this
  side of the development world will only help him in his future
  endeavors.

  To this end, I would like to see Scott actively participate in
  senior-level disucssions around code layout and architecture. Going
  forward, I would like to see him advance to where he can make such
  decisions himself and have those decisions be accepted by his
  Engineering Lead and his peers.

  Scott should seek pairing opportunities with other senior developers
  also the Engineering Lead. This will ensure that his knowledge and
  experience will grow as he gets exposed to the analysis and resolution
  of complex business tasks using software.

  Finally, I would also like Scott to give Tech Talks, which will not
  only hone his own knowledge, but let others benefit from his research
  as well.
