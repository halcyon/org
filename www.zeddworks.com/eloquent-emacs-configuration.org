#+STARTUP: showall
#+STARTUP: hidestars
#+OPTIONS: H:2 num:nil tags:nil toc:nil timestamps:t
#+LAYOUT: post
#+COMMENTS: true
#+AUTHOR: Scott McLeod
#+DATE: 2016-02-17 Wed 13:26
#+TITLE: Eloquent Emacs Configuration
#+Email: @deepresolve
#+DESCRIPTION: A guide to configuring Emacs
#+TAGS: emacs
#+CATEGORIES: emacs
#+COMMENTS: false
#+REVEAL_THEME: night
#+REVEAL_TRANS: linear

* Emacs distributions
#+ATTR_REVEAL: :frag (t)
- Easy to install
- Preconfigured
- Great default settings
- Curated packages and experience

[[../img/seuss/truffula-harvester.jpg]]

** Which Emacs distribution is the best?
#+REVEAL: split
[[../img/simpsons/burns-decision.jpg]]
#+BEGIN_NOTES
When making any decision, it's helpful to know the facts.
#+END_NOTES
#+REVEAL: split
[[../img/simpsons/ketchup.jpg]]
#+BEGIN_NOTES
Sometimes the differentiators can be difficult to sort out.
#+END_NOTES
#+REVEAL: split
[[../img/simpsons/catsup.jpg]]

** [[https://github.com/bbatsov/prelude][Emacs Prelude]]
- Written by our favorite Bulgarian, Bozhidar Batsov
#+BEGIN_NOTES
You might remember Bozhidar from such projects as [[https://github.com/bbatsov/rubocop][Rubocop]], [[https://github.com/clojure-emacs/cider][Cider]], and [[https://github.com/bbatsov/clojure-style-guide][The
Clojure Style Guide]].
#+END_NOTES
#+ATTR_REVEAL: :frag t
[[../img/simpsons/troy-mcclure.jpg]]
** [[https://github.com/dimitri/emacs-kicker][Emacs Kicker]]
** [[http://overtone.github.io/emacs-live/][Emacs Live]]
#+BEGIN_NOTES
Emacs Live is designed with the artist in mind.  It's focus is on live
coding with [[http://overtone.github.io/][Overtone]] and [[http://github.com/quil/quil][Quil]], which
#+END_NOTES
#+ATTR_REVEAL: :frag (t)
 - *Overtone*:
   - A Clojure live coding audio environment for exploring music, instrument building and collaborative jamming
 - *Quil*:
   - A Clojure live coding drawing and animation system
#+ATTR_REVEAL: :frag t
  #+BEGIN_QUOTE
  A jolly good generic Clojure hacking config
  #+END_QUOTE
#+ATTR_REVEAL: :frag t
  [[../img/samurai-jack-rave.gif]]

** [[http://spacemacs.org/][Spacemacs]]
  [[https://github.com/syl20bnr/spacemacs/raw/master/doc/img/title2.png]]

#+REVEAL: split
[[../img/simpsons/kent-brockman-my-two-cents.jpg]]

* [[http://www.theonion.com/article/man-on-internet-almost-falls-into-world-of-diy-mus-17013][Man On Internet Almost Falls Into World Of DIY Mustard Enthusiasts]]
[[../img/theonion/steve-gibson-diy-mustard.jpg]]

* What's an Emacs?
#+BEGIN_NOTES
My goal is to provide you with the guide to Emacs that I wish I'd had.
Drawing on its Lisp heritage, the Emacs community rapidly meets the
needs of its user base.  As the community evolves, better community
developed solutions and core functionality obsolete prior ones.  While
this provides users with a wealth of options, it also results in dated
advice and the paradox of choice.
#+END_NOTES
[[../img/simpsons/homer-panic.jpg]]

* ELPA

* Marmalade
#+BEGIN_QUOTE
In marmalade, packages are manually submitted by authors. They need to
be built by the developers and then uploaded to the site.
#+END_QUOTE

* MELPA
#+BEGIN_QUOTE
In MELPA, packages are automatically built by our server. The recipes
must be uploaded/submitted by someone but if there is no major change
to repository structure then the recipe doesn't need to be updated and
packages are automatically updated when the package author pushes new
code to their repository. It was built because I wanted to use the
versions of packages that were in the VCS but I didn't want to use
submodules or have to worry about VCS systems like mercurial, svn,
git, and bazaar.
#+END_QUOTE

- Server Side homebrew

* package-list-packages
* package-install
#+BEGIN_SRC elisp
; list the packages you want
(setq package-list '(package1 package2 package3))

; list the repositories containing them
(setq package-archives '(("elpa" . "http://tromey.com/elpa/")
                         ("gnu" . "http://elpa.gnu.org/packages/")
                         ("marmalade" . "http://marmalade-repo.org/packages/")))

; activate all the packages (in particular autoloads)
(package-initialize)

; fetch the list of packages available
(unless package-archive-contents
  (package-refresh-contents))

; install the missing packages
(dolist (package package-list)
  (unless (package-installed-p package)
    (package-install package)))
#+END_SRC
* Vundle

* El-Get
#+ATTR_REVEAL: :frag t
#+BEGIN_QUOTE
  Rather than ask authors or contributors to clean-up and package
  existing software, the El-Get approach is to take bits and pieces as
  they exist today and still empower Emacs users in a way that those
  random electrons are easy to use.
#+END_QUOTE
#+ATTR_REVEAL: :frag t
[[../img/el-guapo.jpg]]
#+BEGIN_NOTES
The package.el system was released with Emacs 24 in the summer
of 2012.  In emacs-years this isn't a particularly long time, and many
bits of elisp are not available in a package archive.  Bits of Elisp
are on the [[https://www.emacswiki.org][Emacs Wiki]], and various revision management systems.  Most
Elisp written today is published first on Github and then to MELPA.

El-Get provides a layer of abstraction above all these different
sources of Elisp.  You might say it provides a plethora of methods for
fetching Elisp code.
#+END_NOTES

* use-package
#+ATTR_REVEAL: :frag (t)
- Macro written by John Wiegley
- Provides for organization
- Each package and its configuration can be self contained
- Helps us remember which settings are affiliated with each package

* outshine
#+ATTR_REVEAL: :frag (t)
- When combined with use-package gives us an easy way to fold our
  config for easy viewing and maintenance

* quelpa
#+ATTR_REVEAL: :frag (t)
- Client side MELPA, i.e. the homebrew of emacs
- Creates and builds packages locally from any source
- Uses same recipes as MELPA for formulas
#+ATTR_REVEAL: :frag t
#+BEGIN_SRC elisp
(color-theme :url "http://bzr.savannah.gnu.org/r/color-theme/trunk"
             :fetcher bzr
             :files ("*.el" "themes"))
#+END_SRC
* quelpa-use-package
- Allows us to integrate quelpa and use-package

* Bootstrapping the system
#+BEGIN_SRC elisp
;;; package --- init.el
;;; Commentary:
;;; Code:
(setq message-log-max 10000)

(require 'package)
(setq package-enable-at-startup nil)
(setq package-archives '(("melpa-stable" . "https://stable.melpa.org/packages/")
                         ("gnu" . "https://elpa.gnu.org/packages/")))
(unless (file-directory-p "~/.emacs.d/elpa/archives")
  (package-refresh-contents))
(package-initialize)

(setq quelpa-update-melpa-p nil)
(unless (require 'quelpa nil t)
  (with-temp-buffer
    (url-insert-file-contents (concat "https://raw.github.com/quelpa"
                                      "/quelpa/master/bootstrap.el"))
    (eval-buffer)))
#+END_SRC
#+BEGIN_NOTES

#+END_NOTES

* Not without my Emacs
  [[../img/emacs-IGNUcius.png]]
#+BEGIN_QUOTE
I'm going to bring my Emacs with me.
#+END_QUOTE
â€•Eric Caspary

* Emacs Startup Time
C-u 0 M-x byte-recompile-directory
